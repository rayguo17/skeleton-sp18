package byog.Core;

import byog.Core.Items.Interactable;
import byog.Core.Items.Player;
import byog.TileEngine.TETile;
import byog.TileEngine.Tileset;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class World implements Serializable {
    public int layer;
    private TETile[][] map;
    public List<Interactable> itemList;
    public Player player;
    public static final int[][] dirArr = new int[][]{
            {-1,0},{1,0},{0,1},{0,-1},
    };

    public TETile[][] getCurrentWorld(){
        //put all player or object on map!

        TETile[][] renderedMap = TETile.copyOf(map);
        for(int i=0;i<itemList.size();i++){
            Interactable item = itemList.get(i);
            WorldGenerator.Position p = item.getPosition();
            switch(item.getTitle()){

                case "Locked Door":
                    renderedMap[p.x][p.y]=Tileset.LOCKED_DOOR;
            }
        }
        WorldGenerator.Position playerPos = player.getPosition();
        renderedMap[playerPos.x][playerPos.y] = Tileset.PLAYER;
        return renderedMap;
    }
    public World(int w,int h,int layer,WorldGenerator wg){

        map = new TETile[w][h];
        this.layer =layer;

        //player position should be generated by world generator.
        itemList = wg.generateNLevel(map,layer);
        //get player from itemList;
        if(setPlayer()){
            System.out.println("Set player success");
        }

    }
    public boolean setPlayer(){
        for(int i=0;i<itemList.size();i++){
            Interactable item = itemList.get(i);
            if (item.getTitle()=="Player"){
                player = (Player)item;
                return true;
            }
        }
        return false;
    }


    public void handleMovement(char c){
        //decide movement array depends on user input.
        char[] cArr = {'A','D','W','S'};
        List<Character> dirLis = new ArrayList<>();
        for (int i=0;i<cArr.length;i++){
            dirLis.add(cArr[i]);
        }
        WorldGenerator.Position playerPos = player.getPosition();
        int[] targetDir = dirArr[dirLis.indexOf(c)];
        int newX = playerPos.x+targetDir[0];
        int newY = playerPos.y+targetDir[1];
        if(!map[newX][newY].equals(Tileset.WALL) && !map[newX][newY].equals(Tileset.NOTHING)){
            playerPos.x = newX;
            playerPos.y = newY;
        }

    }
    public void handleInteract(WorldManager wm){
        //check the brick the same address as player
        for(Interactable item : itemList){
            if(!player.equals(item) && player.getPosition().equals(item.getPosition())){
                //do something in the behavior!!!

                item.behavior(wm);
                break;
            }
        }
    }
}
